import unittest
from heatpump import HeatPump


class TestLoad(unittest.TestCase):

    def setUp(self):
        self.timings = [
            3509, 1677, 431, 1300, 418, 1349, 376, 425, 470, 401, 464, 407,
            458, 1299, 407, 414, 477, 392, 463, 1258, 432, 1291, 433, 419,
            462, 1280, 414, 480, 415, 398, 486, 1235, 440, 1289, 432, 424,
            477, 1256, 422, 1292, 427, 430, 491, 388, 457, 1257, 443, 419,
            492, 380, 440, 1277, 440, 432, 438, 423, 431, 437, 442, 430,
            460, 399, 465, 400, 462, 409, 465, 400, 465, 396, 480, 391,
            524, 384, 396, 432, 462, 407, 486, 422, 390, 429, 492, 380,
            464, 400, 510, 393, 400, 426, 436, 429, 434, 1296, 426, 457,
            415, 430, 445, 419, 533, 336, 439, 424, 434, 1286, 433, 430,
            442, 445, 471, 420, 403, 456, 406, 441, 423, 1291, 436, 1285,
            425, 485, 441, 421, 398, 430, 435, 427, 465, 394, 467, 405,
            436, 425, 439, 434, 429, 446, 422, 427, 440, 463, 429, 1274,
            425, 1298, 431, 1303, 415, 449, 465, 394, 443, 1272, 432, 1281,
            461, 1267, 433, 1283, 437, 436, 430, 1285, 434, 1285, 431, 429,
            443, 426, 438, 1279, 439, 447, 432, 1278, 434, 428, 436, 428,
            533, 333, 503, 366, 465, 395, 438, 427, 491, 373, 456, 413,
            435, 431, 436, 427, 436, 463, 403, 424, 437, 427, 465, 400,
            490, 377, 441, 468, 401, 424, 471, 398, 450, 415, 434, 423,
            440, 430, 469, 395, 439, 459, 451, 378, 487, 382, 456, 408,
            434, 439, 472, 388, 442, 480, 431, 379, 432, 475, 446, 400,
            474, 375, 484, 379, 485, 384, 487, 375, 441, 451, 445, 406,
            481, 380, 438, 449, 411, 451, 413, 440, 418, 471, 396, 446,
            474, 376, 441, 426, 440, 424, 439, 437, 428, 434, 463, 1268,
            432, 1290, 440, 1285, 433, 1285, 430, 433, 436, 428, 530, 1190,
            433, 1292, 430, 17230, 3622, 1679, 436, 1293, 427, 1296, 429, 452,
            469, 400, 424, 432, 472, 1262, 423, 425, 448, 412, 437, 1292,
            425, 1299, 436, 424, 463, 1262, 431, 462, 429, 401, 432, 1290,
            428, 1294, 436, 418, 442, 1280, 429, 1298, 432, 429, 434, 429,
            465, 1259, 475, 395, 462, 401, 468, 1256, 432, 431, 435, 434,
            460, 398, 438, 428, 437, 426, 436, 442, 423, 430, 440, 433,
            438, 416, 440, 472, 404, 422, 492, 376, 456, 413, 440, 434,
            489, 376, 441, 428, 467, 462, 373, 432, 431, 436, 436, 472,
            431, 1254, 428, 450, 470, 386, 471, 387, 449, 416, 445, 421,
            435, 1283, 442, 438, 476, 438, 388, 455, 406, 441, 421, 435,
            439, 1288, 430, 1292, 432, 423, 441, 427, 438, 423, 440, 423,
            493, 379, 440, 423, 449, 419, 467, 403, 441, 427, 493, 375,
            459, 413, 465, 1263, 430, 1287, 427, 1286, 439, 452, 405, 440,
            511, 1209, 433, 1307, 411, 1287, 428, 1291, 440, 428, 436, 1287,
            431, 1290, 434, 433, 426, 426, 452, 1272, 439, 424, 441, 1283,
            433, 464, 401, 440, 425, 428, 481, 386, 485, 377, 432, 542,
            333, 426, 486, 386, 436, 428, 470, 398, 460, 403, 511, 356,
            488, 379, 486, 420, 399, 447, 424, 421, 459, 420, 420, 442,
            477, 379, 458, 406, 438, 425, 437, 426, 434, 455, 411, 427,
            477, 391, 442, 424, 470, 386, 443, 479, 455, 352, 435, 436,
            434, 427, 463, 412, 437, 427, 438, 424, 440, 424, 438, 441,
            480, 377, 432, 437, 438, 467, 400, 445, 418, 425, 436, 454,
            416, 491, 371, 440, 427, 427, 436, 465, 395, 429, 442, 422,
            445, 422, 479, 1238, 432, 1301, 427, 1289, 433, 1286, 432, 478,
            395, 421, 488, 1250, 429, 1290, 436]
        self.byte_codes = [35, 203, 38, 1, 0, 32, 8, 6, 192, 121, 83, 0, 0, 0,
                           0, 0, 0, 207]
        self.decoded = {
            'vane': 'swing',
            'on': True,
            'long_mode': False,
            'prog': 'none',
            'econo_cool': False,
            'read_clock': 83,
            'hvac_mode': 'heat',
            'wide_vane': 'swing',
            'fan_speed': 1,
            'end_time': 0,
            'start_time': 0,
            'temp': 22}

    def test_simple_decode(self):
        """ Decode a simple successfully captured input """
        as_ints = HeatPump.decode(self.timings)
        self.assertListEqual(as_ints, self.byte_codes)
        hp = HeatPump()
        hp.load_bytes(as_ints)
        state = hp.get_json_state()
        for key in self.decoded:
            self.assertEqual(self.decoded[key], state[key])

    
    def test_half_decode(self):
        """ Load only the first message """
        as_ints = HeatPump.decode(self.timings[0:291])
        self.assertListEqual(as_ints, self.byte_codes)
        hp = HeatPump()
        hp.load_bytes(as_ints)
        state = hp.get_json_state()
        for key in self.decoded:
            self.assertEqual(self.decoded[key], state[key])

    def test_offset_decode(self):
        """ Cut off the start, check we can find it part way through """
        as_ints = HeatPump.decode(self.timings[123:])
        self.assertListEqual(as_ints, self.byte_codes)
        hp = HeatPump()
        hp.load_bytes(as_ints)
        state = hp.get_json_state()
        for key in self.decoded:
            self.assertEqual(self.decoded[key], state[key])

    def test_half_working(self):
        """ Mess up the checksum in the second half, the should still load """
        self.timings[-6] = 1300
        as_ints = HeatPump.decode(self.timings)
        self.assertListEqual(as_ints, self.byte_codes)
        hp = HeatPump()
        hp.load_bytes(as_ints)
        state = hp.get_json_state()
        for key in self.decoded:
            self.assertEqual(self.decoded[key], state[key])
